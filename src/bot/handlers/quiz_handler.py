import json
import openai
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from loguru import logger
from src.settings.config import config
from src.bot.handlers.common import start
from src.bot.constants import (
    QUIZ_SELECTING_TOPIC,
    QUIZ_WAITING_FOR_ANSWER,
    QUIZ_SHOWING_RESULT
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç
try:
    with open(config.paths.prompts / "quiz.txt", "r", encoding="utf-8") as f:
        QUIZ_SINGLE_PROMPT = f.read().strip()
except (FileNotFoundError, IOError) as e:
    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞: {e}")
    QUIZ_SINGLE_PROMPT = ""

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ —Ç–µ–º–∞–º–∏ –∫–≤—ñ–∑—É
def _get_quiz_topics_keyboard() -> InlineKeyboardMarkup:
    """–ó—á–∏—Ç—É—î —Ç–µ–º–∏ –∫–≤—ñ–∑—É –∑ —Ñ–∞–π–ª—É —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    try:
        with open(config.paths.menus / "quiz_topics.json", "r", encoding="utf-8") as file:
            menu_data = json.load(file)

        quiz_topics = {k: v for k, v in menu_data.items() if k != "start"}
        keyboard = [
            [InlineKeyboardButton(text, callback_data=key)]
            for key, text in quiz_topics.items()
        ]
        keyboard.append([InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†", callback_data="start")])
        return InlineKeyboardMarkup(keyboard)
    except (FileNotFound, json.JSONDecodeError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É quiz_topics.json: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("–ü–æ—á–∞—Ç–∏", callback_data="start")]])


async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /quiz –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏, –Ω–∞–¥—Å–∏–ª–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î —Ç–µ–º–∏."""
    if update.callback_query:
        await update.callback_query.answer()
        reply_to = update.callback_query.message
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.callback_query.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É 'quiz'.")
    else:
        reply_to = update.message
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É /quiz.")

    context.user_data['quiz_score'] = 0

    image_path = config.paths.images / "quiz.jpg"
    await reply_to.reply_photo(photo=open(image_path, 'rb'))

    reply_markup = _get_quiz_topics_keyboard()

    await reply_to.reply_text(
        "–û–±–µ—Ä–∏ —Ç–µ–º—É, —â–æ–± –ø–æ—á–∞—Ç–∏ –∫–≤—ñ–∑:",
        reply_markup=reply_markup
    )
    return QUIZ_SELECTING_TOPIC


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä—É—î –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–≤—ñ–∑—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ChatGPT —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    query = update.callback_query
    await query.answer()

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è "–©–µ –ø–∏—Ç–∞–Ω–Ω—è" –∞–±–æ –Ω–æ–≤–æ—ó —Ç–µ–º–∏
    if query.data == "ask_another_question":
        topic_text = context.user_data.get('quiz_topic_text')
        if not topic_text:
            await query.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–µ–º–∞ –∫–≤—ñ–∑—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –∑–Ω–æ–≤—É.")
            return QUIZ_SELECTING_TOPIC

        prompt = f"{QUIZ_SINGLE_PROMPT}\n–ö–æ–º–∞–Ω–¥–∞: '{topic_text}'"
    else:
        # –ù–æ–≤–∞ —Ç–µ–º–∞ –≤–∏–±—Ä–∞–Ω–∞, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó
        topic_key = query.data
        topic_mapping = {
            "quiz_python": "–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é Python",
            "quiz_javascript": "–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é JavaScript",
            "quiz_docker": "Docker",
            "quiz_web": "–≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"
        }
        topic_text = topic_mapping.get(topic_key)
        if not topic_text:
            await query.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–µ–º–∞ –∫–≤—ñ–∑—É.")
            return ConversationHandler.END

        context.user_data['quiz_topic_text'] = topic_text
        prompt = f"{QUIZ_SINGLE_PROMPT}\n–ö–æ–º–∞–Ω–¥–∞: '{topic_text}'"

    try:
        response = openai.chat.completions.create(
            model=config.openai.model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )

        question_text = response.choices[0].message.content.strip()

        context.user_data['last_question'] = question_text

        await query.message.reply_text(question_text)

        return QUIZ_WAITING_FOR_ANSWER
    except openai.OpenAIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ OpenAI API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω–Ω—è: {e}")
        await query.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ AI. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω–Ω—è: {e}")
        await query.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return ConversationHandler.END


async def process_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î —ó—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ChatGPT."""
    user_answer = update.message.text
    last_question = context.user_data.get('last_question', '')
    score = context.user_data.get('quiz_score', 0)

    prompt = f"{QUIZ_SINGLE_PROMPT}\n–ü–∏—Ç–∞–Ω–Ω—è: '{last_question}'\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: '{user_answer}'"

    try:
        response = openai.chat.completions.create(
            model=config.openai.model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2
        )

        chatgpt_response = response.choices[0].message.content.strip()

        if chatgpt_response.startswith("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!"):
            score += 1
            context.user_data['quiz_score'] = score
            result_text = f"‚úÖ {chatgpt_response}\n–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {score}"
        else:
            result_text = f"‚ùå {chatgpt_response}\n–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {score}"

        keyboard = [
            [InlineKeyboardButton("–©–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask_another_question")],
            [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É", callback_data="change_topic")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="end_quiz")],
            [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            result_text,
            reply_markup=reply_markup
        )
        return QUIZ_SHOWING_RESULT
    except openai.OpenAIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ OpenAI API –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ AI.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        return ConversationHandler.END


async def change_topic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –∑–º—ñ–Ω—É —Ç–µ–º–∏."""
    query = update.callback_query
    await query.answer()

    reply_markup = _get_quiz_topics_keyboard()

    await query.message.reply_text(
        "–û–±–µ—Ä–∏ –Ω–æ–≤—É —Ç–µ–º—É:",
        reply_markup=reply_markup
    )
    return QUIZ_SELECTING_TOPIC


async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à—É—î –∫–≤—ñ–∑."""
    query = update.callback_query
    await query.answer()

    final_score = context.user_data.get('quiz_score', 0)
    await query.message.reply_text(
        f"–ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–≤—ñ–π —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {final_score}. –°–ø–æ–¥—ñ–≤–∞—é—Å—å, —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å!")

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
    await start(update, context)

    return ConversationHandler.END


async def cancel_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à—É—î –∫–≤—ñ–∑, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É /cancel."""
    await update.message.reply_text("–ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    return ConversationHandler.END
