import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from loguru import logger
import openai
from src.settings.config import config
from src.bot.handlers.common import start
from src.bot.constants import GPT_DIALOGUE_STATE

openai.api_key = config.openai.api_key


async def start_gpt_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /gpt —Ç–∞ —ñ–Ω—ñ—Ü—ñ—é—î –¥—ñ–∞–ª–æ–≥."""

    if update.message:
        target_message = update.message
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É /gpt.")
    elif update.callback_query:
        target_message = update.callback_query.message
        await update.callback_query.answer()
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É GPT.")
    else:
        return ConversationHandler.END

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    image_path = (config.paths.images / "gpt.jpg")
    if not image_path.is_file():
        logger.error(f"–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {image_path}")
        await target_message.reply_text("–í–∏–±–∞—á—Ç–µ, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")
    else:
        await target_message.reply_photo(
            photo=image_path.open("rb"),
            caption="–í—ñ—Ç–∞—é! –Ø —Ç–≤—ñ–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–≤—ñ–π –∑–∞–ø–∏—Ç."
        )

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥—ñ–∞–ª–æ–≥—É
    context.user_data['dialogue_history'] = []

    return GPT_DIALOGUE_STATE


async def gpt_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —ó—Ö –¥–æ OpenAI."""
    user_message = update.message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∑–∞–ø–∏—Ç: '{user_message}'")

    # –ß–∏—Ç–∞—î–º–æ –ø—Ä–æ–º—Ç —ñ–∑ —Ñ–∞–π–ª—É
    try:
        with open(config.paths.prompts / "gpt.txt", "r", encoding="utf-8") as f:
            gpt_system_prompt = f.read()
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –ø—Ä–æ–º—Ç–∞ gpt.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        gpt_system_prompt = "–í–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∑–∞–ø–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."

    # –î–æ–¥–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    dialogue_history = context.user_data.get('dialogue_history', [])
    if not dialogue_history or dialogue_history[0].get('role') != 'system':
        dialogue_history.insert(0, {"role": "system", "content": gpt_system_prompt})

    dialogue_history.append({"role": "user", "content": user_message})

    try:
        response = openai.chat.completions.create(
            model=config.openai.model,
            messages=dialogue_history,
            temperature=config.openai.temperature
        )
        chatgpt_response = response.choices[0].message.content

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        dialogue_history.append({"role": "assistant", "content": chatgpt_response})
        context.user_data['dialogue_history'] = dialogue_history

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É üö™", callback_data="end_gpt_dialogue")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(chatgpt_response, reply_markup=reply_markup)

    except openai.OpenAIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ OpenAI API: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ AI. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    return GPT_DIALOGUE_STATE


async def end_gpt_dialogue(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à—É—î –¥—ñ–∞–ª–æ–≥ –∑ GPT —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    await query.message.reply_text("–î—ñ–∞–ª–æ–≥ –∑ ChatGPT –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
    context.user_data.pop('dialogue_history', None)

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await start(update, context)

    return ConversationHandler.END
