import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler
from loguru import logger
import openai
from src.settings.config import config
from src.bot.handlers.common import start
from src.bot.constants import (
    TALK_PERSONALITY_STATE,
    TALK_CONVERSING_STATE
)


# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—è–º–∏
def _get_personalities_keyboard() -> InlineKeyboardMarkup:
    """–ó—á–∏—Ç—É—î –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—è–º–∏."""
    try:
        with open(config.paths.menus / "talk.json", "r", encoding="utf-8") as file:
            menu_data = json.load(file)

        keyboard = [[InlineKeyboardButton(button["text"], callback_data=button["callback_data"])] for button in menu_data]
        return InlineKeyboardMarkup(keyboard)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ talk.json: {e}")
        return None


async def start_talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /talk —ñ –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç–µ–π —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
    if update.callback_query:
        await update.callback_query.answer()
        reply_to = update.callback_query.message
    else:
        reply_to = update.message

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} —Ä–æ–∑–ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥ –∑ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é.")

    try:
        image_path = config.paths.images / "talk.jpg"
        await reply_to.reply_photo(photo=open(image_path, 'rb'))
    except FileNotFoundError:
        logger.error("–§–∞–π–ª talk.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    reply_markup = _get_personalities_keyboard()
    if not reply_markup:
        await reply_to.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    await reply_to.reply_text(
        "–û–±–µ—Ä–∏ –≤—ñ–¥–æ–º—É –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, –∑ —è–∫–æ—é —Ö–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏:",
        reply_markup=reply_markup
    )
    return TALK_PERSONALITY_STATE


async def select_personality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ–±—Ä–∞–Ω—É –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å —ñ –ø–æ—á–∏–Ω–∞—î –¥—ñ–∞–ª–æ–≥."""
    query = update.callback_query
    await query.answer()

    personality_key = query.data

    # –û–±—Ä–æ–±–∫–∞ fallback-–∫–Ω–æ–ø–æ–∫
    if personality_key in ["end_talk", "start"]:
        if personality_key == "end_talk":
            await end_talk(update, context)
        return ConversationHandler.END

    try:
        # –î–∏–Ω–∞–º—ñ—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç –∑ .txt —Ñ–∞–π–ª—É
        prompt_file_path = config.paths.prompts / f"{personality_key}.txt"
        with open(prompt_file_path, "r", encoding="utf-8") as file:
            system_prompt = file.read().strip()

        context.user_data['personality_prompt'] = system_prompt
        context.user_data['dialogue_history'] = [{"role": "system", "content": system_prompt}]

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É üö™", callback_data="end_talk")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
        try:
            image_path = config.paths.images / f"{personality_key}.jpg"
            await query.message.reply_photo(
                photo=open(image_path, 'rb'),
                caption="–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à —Å—Ç–∞–≤–∏—Ç–∏ –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è. –Ø –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ –æ–±—Ä–∞–Ω–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å.",
                reply_markup=reply_markup
            )
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {personality_key}.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await query.message.reply_text(
                "–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à —Å—Ç–∞–≤–∏—Ç–∏ –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è. –Ø –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ –æ–±—Ä–∞–Ω–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å.",
                reply_markup=reply_markup
            )

        return TALK_CONVERSING_STATE
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ {personality_key}.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await query.message.reply_text("–í–∏–±–∞—á, –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å.")
        return ConversationHandler.END
    except (openai.OpenAIError, json.JSONDecodeError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ: {e}")
        await query.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return ConversationHandler.END


async def talk_with_personality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–µ–¥–µ –¥—ñ–∞–ª–æ–≥ –∑ ChatGPT —É —Ä–æ–ª—ñ –æ–±—Ä–∞–Ω–æ—ó –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ."""
    user_message = update.message.text
    dialogue_history = context.user_data.get('dialogue_history', [])
    personality_prompt = context.user_data.get('personality_prompt')

    if not personality_prompt:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å.")
        return ConversationHandler.END

    dialogue_history.append({"role": "user", "content": user_message})

    try:
        response = openai.chat.completions.create(
            model=config.openai.model,
            messages=dialogue_history,
            temperature=config.openai.temperature
        )

        chatgpt_response = response.choices[0].message.content
        dialogue_history.append({"role": "assistant", "content": chatgpt_response})
        context.user_data['dialogue_history'] = dialogue_history

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É üö™", callback_data="end_talk")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(chatgpt_response, reply_markup=reply_markup)

        return TALK_CONVERSING_STATE
    except openai.OpenAIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ OpenAI API –≤ –¥—ñ–∞–ª–æ–∑—ñ: {e}")
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ AI. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –¥—ñ–∞–ª–æ–∑—ñ: {e}")
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return ConversationHandler.END


async def end_talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à—É—î –¥—ñ–∞–ª–æ–≥ –∑ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    await query.message.reply_text("–†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–≤–µ—Ä—Ç–∞—é –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
    context.user_data.pop('personality_prompt', None)
    context.user_data.pop('dialogue_history', None)

    await start(update, context)

    return ConversationHandler.END


async def cancel_talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à—É—î —Ä–æ–∑–º–æ–≤—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É /cancel."""
    await update.message.reply_text("–†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    context.user_data.pop('personality_prompt', None)
    context.user_data.pop('dialogue_history', None)
    return ConversationHandler.END
