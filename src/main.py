import os
import sys
from telegram import BotCommand, MenuButtonCommands
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler
)
from loguru import logger
from src.settings.config import config
from src.settings.logging_config import setup_logging
from src.bot.handlers import gpt_handler, talk_handler, quiz_handler, random_handler
from src.bot.handlers.common import start
from src.bot.constants import (
    GPT_DIALOGUE_STATE,
    TALK_PERSONALITY_STATE,
    TALK_CONVERSING_STATE,
    QUIZ_SELECTING_TOPIC,
    QUIZ_WAITING_FOR_ANSWER,
    QUIZ_SHOWING_RESULT
)


async def post_init(application: Application):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ —Ç–∞ –º–µ–Ω—é –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É."""
    commands = [
        BotCommand("start", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†"),
        BotCommand("random", "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç üß†"),
        BotCommand("gpt", "–ó–∞–ø–∏—Ç–∞—Ç–∏ —É ChatGPT ü§ñ"),
        BotCommand("quiz", "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ‚ùì"),
        BotCommand("talk", "–î—ñ–∞–ª–æ–≥ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é üë§")
    ]
    await application.bot.set_my_commands(commands)
    await application.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    logger.info("–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ —Ç–∞ –º–µ–Ω—é —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    setup_logging()

    if not config.bot_api_key:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env")
        sys.exit(1)

    application = Application.builder().token(config.bot_api_key).post_init(post_init).build()

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±'—î–∫—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤ bot_data
    application.bot_data['config'] = config

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –∑ GPT
    gpt_conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler("gpt", gpt_handler.start_gpt_conversation),
            CallbackQueryHandler(gpt_handler.start_gpt_conversation, pattern="^gpt$")
        ],
        states={
            GPT_DIALOGUE_STATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_handler.gpt_message_handler),
                CallbackQueryHandler(gpt_handler.end_gpt_dialogue, pattern="^end_gpt_dialogue$")
            ]
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("cancel", gpt_handler.end_gpt_dialogue)
        ]
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –∑ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é
    talk_conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler("talk", talk_handler.start_talk),
            CallbackQueryHandler(talk_handler.start_talk, pattern="^talk$")
        ],
        states={
            TALK_PERSONALITY_STATE: [CallbackQueryHandler(talk_handler.select_personality, pattern="^talk_.*")],
            TALK_CONVERSING_STATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, talk_handler.talk_with_personality),
                CallbackQueryHandler(talk_handler.end_talk, pattern="^end_talk$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", talk_handler.cancel_talk),
            CommandHandler("start", start)
        ]
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–≤—ñ–∑—É
    quiz_conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler("quiz", quiz_handler.start_quiz),
            CallbackQueryHandler(quiz_handler.start_quiz, pattern="^quiz$")
        ],
        states={
            QUIZ_SELECTING_TOPIC: [
                CallbackQueryHandler(quiz_handler.ask_question, pattern="^quiz_.*")
            ],
            QUIZ_WAITING_FOR_ANSWER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_handler.process_answer)
            ],
            QUIZ_SHOWING_RESULT: [
                CallbackQueryHandler(quiz_handler.ask_question, pattern="^ask_another_question$"),
                CallbackQueryHandler(quiz_handler.change_topic, pattern="^change_topic$"),
                CallbackQueryHandler(quiz_handler.end_quiz, pattern="^end_quiz$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", quiz_handler.cancel_quiz),
            CommandHandler("start", start),
            CallbackQueryHandler(start, pattern="^start$")
        ]
    )

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(gpt_conversation_handler)
    application.add_handler(talk_conversation_handler)
    application.add_handler(quiz_conversation_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("random", random_handler.get_random_fact))
    application.add_handler(CallbackQueryHandler(random_handler.get_random_fact, pattern="^random$"))

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(start, pattern="^start$"))
    application.add_handler(CallbackQueryHandler(gpt_handler.start_gpt_conversation, pattern="^gpt$"))
    application.add_handler(CallbackQueryHandler(talk_handler.start_talk, pattern="^talk$"))
    application.add_handler(CallbackQueryHandler(quiz_handler.start_quiz, pattern="^quiz$"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling()


if __name__ == "__main__":
    main()
